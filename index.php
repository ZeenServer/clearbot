<?php
declare(strict_types=1);

require __DIR__ . '/vendor/autoload.php';

use App\Services\TelegramApiService;
use App\Services\PatternService;
use App\Services\BanService;
use App\Services\ModerationContextRepository;
use function App\Support\extractMessageText;

$dotenv = Dotenv\Dotenv::createImmutable(__DIR__);
$dotenv->load();

$telegram = new TelegramApiService($_ENV['TELEGRAM_BOT_TOKEN']);
$patternService = new PatternService();
$banService = new BanService($telegram);
$ctxRepo = new ModerationContextRepository();

$raw = file_get_contents('php://input');
$update = json_decode($raw, true) ?? [];

// –ë–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ –∞–ø–¥–µ–π—Ç –ø—É—Å—Ç
if (!$update) {
    http_response_code(200);
    exit('OK');
}

try {
    if (isset($update['message'])) {
        handleMessage($update['message'], $telegram, $patternService, $banService, $ctxRepo);
    } elseif (isset($update['callback_query'])) {
        handleCallback($update['callback_query'], $telegram, $banService, $ctxRepo);
    }
} catch (Throwable $e) {
    // –í –ª–æ–≥-—á–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫—É—é –æ—à–∏–±–∫—É
    $telegram->log("‚ùó –û—à–∏–±–∫–∞: " . $e->getMessage());
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è/–º–µ–¥–∏–∞
 */
function handleMessage(
    array $message,
    TelegramApiService $telegram,
    PatternService $patterns,
    BanService $bans,
    ModerationContextRepository $ctxRepo
): void {
    $chatId   = (int)$message['chat']['id'];
    $msgId    = (int)$message['message_id'];
    $from     = $message['from'] ?? [];
    $userId   = (int)($from['id'] ?? 0);
    $text     = extractMessageText($message); // —É—á–∏—Ç—ã–≤–∞–µ—Ç text –∏ caption

    // üîë –ö–æ–º–∞–Ω–¥–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞: /reload_cache
    if (($message['text'] ?? '') === '/reload_cache' && $userId === (int)$_ENV['OWNER_ID']) {
        $patterns->reloadCache();
        $bans->reloadCache();
        $telegram->sendMessage($chatId, "‚úÖ –ö—ç—à –æ–±–Ω–æ–≤–ª—ë–Ω –∏–∑ –ë–î");
        $telegram->log("–í–ª–∞–¥–µ–ª–µ—Ü {$userId} –≤—ã–ø–æ–ª–Ω–∏–ª /reload_cache");
        return;
    }

    // 1) –ì–ª–æ–±/–ª–æ–∫ –±–∞–Ω: —É–¥–∞–ª—è–µ–º —Å—Ä–∞–∑—É
    if ($bans->isGloballyBanned($userId) || $bans->isLocallyBanned($chatId, $userId)) {
        $telegram->deleteMessage($chatId, $msgId);
        $telegram->log("üßπ –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {$userId} (–±–∞–Ω) –≤ —á–∞—Ç–µ {$chatId}");
        return;
    }

    // 2) –ü–∞—Ç—Ç–µ—Ä–Ω—ã: –ø—Ä–∏ –ø—É—Å—Ç–æ–º –∫—ç—à–µ ‚Äî –ø–µ—Ä–µ—á–∏—Ç–∞—é—Ç –∏–∑ –ë–î –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    if ($text !== '' && $patterns->match($text)) {
        $telegram->deleteMessage($chatId, $msgId);
        $telegram->log("üßπ –£–¥–∞–ª–µ–Ω–æ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É –≤ —á–∞—Ç–µ {$chatId} –æ—Ç {$userId}: " . mb_strimwidth($text, 0, 140, '‚Ä¶'));
        return;
    }

    // 3) –ï—Å–ª–∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ ¬´–æ—Ç –ª–∏—Ü–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–∞—Ç–∞¬ª ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏
    if (isset($message['forward_from']) && $telegram->isAdmin($chatId, (int)$message['forward_from']['id'])) {
        // –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –º–æ–¥–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis)
        $ctxId = $ctxRepo->store([
            'chat_id'          => $chatId,
            'offender_user_id' => $userId,                 // –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º
            'message_id'       => $msgId,
            'original_text'    => $text,
            'forward_admin_id' => (int)$message['forward_from']['id']
        ]);

        $keyboard = [
            'inline_keyboard' => [[
                ['text' => 'üö´ –ë–∞–Ω',      'callback_data' => "banctx:{$ctxId}"],
                ['text' => '‚ùå –£–¥–∞–ª–∏—Ç—å',  'callback_data' => "delctx:{$ctxId}"]
            ]]
        ];

        $telegram->sendMessage($chatId, "–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º?", $keyboard);
    }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏
 */
function handleCallback(
    array $callback,
    TelegramApiService $telegram,
    BanService $bans,
    ModerationContextRepository $ctxRepo
): void {
    $data = $callback['data'] ?? '';
    $parts = explode(':', $data, 2);
    $action = $parts[0] ?? '';
    $arg = $parts[1] ?? '';

    // –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –∫–æ–ª–±—ç–∫
    $ack = fn(string $text) => $telegram->answerCallbackQuery($callback['id'], $text);

    switch ($action) {
        case 'ban':
            // —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç (–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            [$userId, $chatId] = array_map('intval', explode(':', $arg));
            $bans->banUser($chatId, $userId, (int)$callback['from']['id'], null);
            $ack("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω");
            break;

        case 'del':
            [$msgId, $chatId] = array_map('intval', explode(':', $arg));
            $telegram->deleteMessage($chatId, $msgId);
            $telegram->log("üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {$msgId} –ø–æ –∫–Ω–æ–ø–∫–µ –∞–¥–º–∏–Ω–∞ –≤ —á–∞—Ç–µ {$chatId}");
            $ack("–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ");
            break;

        case 'globalban':
            $userId = (int)$arg;
            $bans->globalBan($userId);
            $telegram->log("üåê –ì–ª–æ–±–±–∞–Ω: {$userId}, –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä {$callback['from']['id']}");
            $ack("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ß–°");
            break;

        case 'banctx':
        case 'delctx':
            $ctxId = $arg;
            $ctx = $ctxRepo->get($ctxId);
            if (!$ctx) {
                $ack("–ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω/–ø—Ä–æ—Ç—É—Ö");
                return;
            }

            $chatId   = (int)$ctx['chat_id'];
            $userId   = (int)$ctx['offender_user_id'];
            $msgId    = (int)$ctx['message_id'];
            $origText = (string)($ctx['original_text'] ?? '');
            $adminId  = (int)$callback['from']['id'];

            if ($action === 'banctx') {
                // –±–∞–Ω + –≥–ª–æ–±-—á–∞—Ç —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º
                $bans->banUser($chatId, $userId, $adminId, $origText);
                $ack("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω");
            } else {
                // —É–¥–∞–ª–µ–Ω–∏–µ
                $telegram->deleteMessage($chatId, $msgId);
                $telegram->log("üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {$msgId} (ctx) –≤ —á–∞—Ç–µ {$chatId} –∞–¥–º–∏–Ω–æ–º {$adminId}");
                $ack("–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ");
            }

            // –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            $ctxRepo->delete($ctxId);
            break;

        default:
            $ack("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ");
            break;
    }
}
